import logging
import pickle
import random
from pathlib import Path
from typing import List

import numpy as np
import typer
from rich.console import Console
from rich.logging import RichHandler
from rich.progress import track
from rich.table import Table
from transformers import set_seed

# --- ËÆæÁΩÆ Rich Âíå Typer ---
logging.basicConfig(
    level="INFO",
    format="%(message)s",
    datefmt="[%X]",
    handlers=[RichHandler(rich_tracebacks=True, markup=True)],
)
app = typer.Typer(pretty_exceptions_show_locals=False)
console = Console()

# --- GPUÂä†ÈÄüÊîØÊåÅ ---
try:
    import cupy as cp
    GPU_AVAILABLE = True
    console.print("[green]‚úì GPUÂä†ÈÄüÂ∑≤ÂêØÁî® (CuPy)[/green]")
except ImportError:
    GPU_AVAILABLE = False
    console.print("[yellow]‚ö† Êú™ÂÆâË£ÖCuPyÔºåÂ∞Ü‰ΩøÁî®CPUËÆ°ÁÆó[/yellow]")


# --- ÂèÇËÄÉ evaluate.py ÁöÑ recall ËÆ°ÁÆóÂáΩÊï∞ ---
def process_pools_batch_gpu(all_embeddings, pools_batch, k_values: List[int], use_gpu: bool = True) -> dict:
    """
    Â§ÑÁêÜpoolsÊâπÊ¨°ÔºåËÆ°ÁÆó‰∏éÊâÄÊúâÂµåÂÖ•ÂêëÈáèÁöÑÁõ∏‰ººÂ∫¶ÔºåÂπ∂ËøîÂõûRecall@KÁªìÊûú„ÄÇ
    ‰ΩøÁî®GPUÂä†ÈÄüËÆ°ÁÆóÁõ∏‰ººÂ∫¶„ÄÇ
    """
    recalls = {}
    for k in k_values:
        recalls[k] = [0, 0]  # [ÊàêÂäüÊ¨°Êï∞, ÊÄªÊ¨°Êï∞]

    anchor_index = [s['anchor'] for s in pools_batch] # [batch_size]
    pool_index = [[s['positive']] + s['negatives'] for s in pools_batch] # [batch_size, pool_size]
    all_embeddings_gpu = cp.asarray(all_embeddings) if use_gpu else all_embeddings
    anchor_emb = all_embeddings_gpu[anchor_index] # [batch_size, embedding_dim]
    pool_emb = all_embeddings_gpu[pool_index] # [batch_size, pool_size, embedding_dim]
    
    anchor_emb = anchor_emb[:, cp.newaxis, :]  # [batch_size, 1, embedding_dim]
    similarities = cp.einsum('bie,bje->bij', anchor_emb, pool_emb)  # [batch_size, 1, pool_size]
    similarities = cp.squeeze(similarities, axis=1)  # [batch_size, pool_size]
    
    # ËÆ°ÁÆóRecall@K
    top_indices = cp.argsort(cp.argsort(-similarities, axis=1), axis=1)[:, 0] + 1
    for k in k_values:
        success, total = 0, 0
        success = (top_indices <= k).sum().item()  # ÊàêÂäüÁöÑÊï∞Èáè
        total = len(top_indices)
        assert success <= total, "ÊàêÂäüÊ¨°Êï∞‰∏çËÉΩÂ§ß‰∫éÊÄªÊ¨°Êï∞"
        recalls[k][0] += success
        recalls[k][1] += total

    return recalls


@app.command()
def main(
    pools_path: Path = typer.Argument(..., help="Áî±evaluate_bincrop.pyÁîüÊàêÁöÑpools pickleÊñá‰ª∂Ë∑ØÂæÑ„ÄÇ", exists=True, file_okay=True),
    embeddings_path: Path = typer.Argument(..., help="È¢ÑÂÖàËÆ°ÁÆóÁöÑÂµåÂÖ•ÂêëÈáènpyÊñá‰ª∂Ë∑ØÂæÑ„ÄÇ", exists=True, file_okay=True),
    ks_str: str = typer.Option("1,5,10,15,20,25,30,35,40,45,50", "--ks", "-k", help="Ë¶ÅËØÑ‰º∞ÁöÑKÂÄºÔºå‰ª•ÈÄóÂè∑ÂàÜÈöî„ÄÇ"),
    eval_samples: int = typer.Option(0, "--eval-samples", "-n", help="Áî®‰∫éËØÑ‰º∞ÁöÑÈöèÊú∫poolÊ†∑Êú¨Êï∞Èáè„ÄÇ0Ë°®Á§∫‰ΩøÁî®ÊâÄÊúâpools„ÄÇ"),
    seed: int = typer.Option(42, "--seed", "-s", help="Áî®‰∫éË¥üÈááÊ†∑ÁöÑÈöèÊú∫ÁßçÂ≠ê„ÄÇ"),
    use_gpu: bool = typer.Option(True, "--gpu/--no-gpu", help="ÊòØÂê¶‰ΩøÁî®GPUÂä†ÈÄüËÆ°ÁÆó„ÄÇ"),
    gpu_batch_size: int = typer.Option(512, "--gpu-batch-size", help="GPUÊâπÈáèÂ§ÑÁêÜÁöÑpoolÊï∞Èáè„ÄÇ"),
):
    """
    ‰ΩøÁî®evaluate_bincrop.pyÁîüÊàêÁöÑpoolsÂíåÈ¢ÑÂÖàËÆ°ÁÆóÁöÑÂµåÂÖ•ÂêëÈáèËØÑ‰º∞‰∫åËøõÂà∂ÂáΩÊï∞Áõ∏‰ººÊÄßRecall@KÊÄßËÉΩ„ÄÇ
    """
    console.rule(f"[bold blue]ÂºÄÂßã‰∫åËøõÂà∂ÂáΩÊï∞Áõ∏‰ººÊÄßËØÑ‰º∞[/bold blue]")
    set_seed(seed)
    
    # GPUÂèØÁî®ÊÄßÊ£ÄÊü•
    if use_gpu and not GPU_AVAILABLE:
        console.print("[yellow]‚ö† ËØ∑Ê±Ç‰ΩøÁî®GPU‰ΩÜCuPy‰∏çÂèØÁî®ÔºåÂ∞ÜÂõûÈÄÄÂà∞CPUËÆ°ÁÆó[/yellow]")
        use_gpu = False
    
    if use_gpu:
        console.print(f"[green]üöÄ Â∞Ü‰ΩøÁî®GPUÂä†ÈÄüÔºåÊâπÈáèÂ§ßÂ∞è: {gpu_batch_size}[/green]")
    else:
        console.print("[blue]üíª ‰ΩøÁî®CPUËÆ°ÁÆó[/blue]")
    
    # --- 1. Âä†ËΩΩpools ---
    logging.info(f"Ê≠£Âú®‰ªé [cyan]{pools_path}[/cyan] Âä†ËΩΩpools...")
    with open(pools_path, 'rb') as f:
        pools = pickle.load(f)
    logging.info(f"PoolsÂä†ËΩΩÂÆåÊØïÔºåÂÖ± [green]{len(pools)}[/green] ‰∏™pools„ÄÇ")
    
    # --- 2. Âä†ËΩΩÂµåÂÖ•ÂêëÈáè ---
    logging.info(f"Ê≠£Âú®‰ªé [cyan]{embeddings_path}[/cyan] Âä†ËΩΩÂµåÂÖ•ÂêëÈáè...")
    all_embeddings = np.load(embeddings_path)
    logging.info(f"ÂµåÂÖ•ÂêëÈáèÂä†ËΩΩÂÆåÊØïÔºåÂΩ¢Áä∂‰∏∫: [green]{all_embeddings.shape}[/green]")
    
    # --- 3. ËÆæÁΩÆËØÑ‰º∞ÂèÇÊï∞ ---
    k_values = sorted([int(k.strip()) for k in ks_str.split(',')])
    
    if eval_samples > 0 and eval_samples < len(pools):
        logging.info(f"Â∞Ü‰ªé {len(pools):,} ‰∏™Ê†∑Êú¨‰∏≠ÈöèÊú∫ÈááÊ†∑ [yellow]{eval_samples:,}[/yellow] ‰∏™ËøõË°åËØÑ‰º∞...")
        pools_to_evaluate = random.sample(pools, eval_samples)
    else:
        logging.info(f"Â∞ÜËØÑ‰º∞ÊâÄÊúâ {len(pools):,} ‰∏™Ê†∑Êú¨...")
        pools_to_evaluate = pools
    
    # --- 4. ÊâπÈáèGPUÂä†ÈÄüËØÑ‰º∞ ---
    logging.info("ÂºÄÂßãÊâπÈáèGPUÂä†ÈÄüËØÑ‰º∞...")
    
    temp_results = {k: [0, 0] for k in k_values}
    current_batch_size = gpu_batch_size
    
    for i in track(range(0, len(pools_to_evaluate), current_batch_size), description="Ê≠£Âú®ËØÑ‰º∞..."):
        pools_batch = pools_to_evaluate[i:i + current_batch_size]

        result = process_pools_batch_gpu(
            all_embeddings,
            pools_batch,  # Âè™Â§ÑÁêÜÂΩìÂâçÊâπÈáèÂ§ßÂ∞è
            k_values,
            use_gpu=use_gpu
        )
        # Á¥ØÂä†ÁªìÊûú
        for k in k_values:
            temp_results[k][0] += result[k][0]
            temp_results[k][1] += result[k][1]
    
    # Â∞ÜÁªìÊûúËΩ¨Êç¢‰∏∫ÁôæÂàÜÊØî
    results = {f"Recall@{k}": temp_results[k][0] / temp_results[k][1] if temp_results[k][1] > 0 else 0 for k in k_values}
    
    # --- 5. ÊâìÂç∞ÁªìÊûú ---
    console.rule("[bold green]ËØÑ‰º∞ÁªìÊûú[/bold green]")
    table = Table(title="‰∫åËøõÂà∂ÂáΩÊï∞Áõ∏‰ººÊÄß Recall@K ÁªìÊûú")
    table.add_column("ÊåáÊ†á", justify="left", style="cyan")
    table.add_column("ÂÄº", justify="right", style="magenta")
    
    for k in k_values:
        table.add_row(f"Recall@{k}", f"{results[f'Recall@{k}']:.4f}")
    
    # Ê∑ªÂä†ÁªüËÆ°‰ø°ÊÅØ
    table.add_row("", "")  # Á©∫Ë°å
    table.add_row("ÊÄªPoolsÊï∞", f"{len(pools_to_evaluate):,}")
    if len(pools) > 0:
        table.add_row("PoolÂ§ßÂ∞è", f"{len(pools[0]['negatives']) + 1}")  # +1 for positive
    
    console.print(table)


if __name__ == "__main__":
    app()
